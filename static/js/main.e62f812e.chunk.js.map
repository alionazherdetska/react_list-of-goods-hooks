{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","DEFAULT","sortField","setSortField","isReversed","setIsReversed","visibleGoods","goods","preparedGoods","sort","good1","good2","ByLength","length","Alphabetically","localeCompare","reverse","getPreparedGoods","className","type","onClick","cn","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAMKA,E,oFAAAA,K,oBAAAA,E,gCAAAA,E,YAAAA,M,KAME,IAAMC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAgCK,IAAMC,EAAgB,WAC3B,MAAkCC,mBAAmBH,EAASI,SAA9D,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCH,oBAAS,GAA7C,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EAjCR,SACEC,EACAL,EACAE,GAEA,IAAMI,EAAa,YAAOD,GAqB1B,OAnBIL,GACFM,EAAcC,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKL,EAASe,SACZ,OAAOF,EAAMG,OAASF,EAAME,OAE9B,KAAKhB,EAASiB,eACZ,OAAOJ,EAAMK,cAAcJ,GAE7B,QACE,OAAO,MAKXP,GACFI,EAAcQ,UAGTR,EAOcS,CAAiBnB,EAAiBI,EAAWE,GAWlE,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,kBAAMjB,EAAaN,EAASiB,iBACrCI,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcL,EAASiB,iBAJvC,iCAUA,wBACEM,QAAS,kBAAMjB,EAAaN,EAASe,WACrCO,KAAK,SACLD,UAAWG,IAAG,SAAU,UAAW,CACjC,WAAYnB,IAAcL,EAASe,WAJvC,4BAUA,wBACEO,KAAK,SACLC,QAlCmB,WACzBf,GAAeD,IAkCTc,UAAWG,IAAG,SAAU,aAAc,CAAE,YAAajB,IAHvD,sBAQgB,KAAdF,GAAoBE,IACpB,wBACEe,KAAK,SACLC,QAvCe,WACvBjB,EAAaN,EAASI,SACtBI,GAAc,IAsCNa,UAAU,4BAHZ,sBAUJ,6BACGZ,EAAagB,KAAI,SAACC,GAAD,OAChB,oBAAe,UAAQ,OAAvB,SACGA,GADMA,YC9GnBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.e62f812e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport cn from \"classnames\";\n\nimport \"bulma/css/bulma.css\";\nimport \"./App.scss\";\n\nenum SortType {\n  ByLength = \"byLength\",\n  Alphabetically = \"alphabetically\",\n  DEFAULT = \"\",\n}\n\nexport const goodsFromServer = [\n  \"Dumplings\",\n  \"Carrot\",\n  \"Eggs\",\n  \"Ice cream\",\n  \"Apple\",\n  \"Bread\",\n  \"Fish\",\n  \"Honey\",\n  \"Jam\",\n  \"Garlic\",\n];\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: SortType,\n  isReversed: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  if (sortField) {\n    preparedGoods.sort((good1, good2) => {\n      switch (sortField) {\n        case SortType.ByLength:\n          return good1.length - good2.length;\n\n        case SortType.Alphabetically:\n          return good1.localeCompare(good2);\n\n        default:\n          return 0;\n      }\n    });\n  }\n\n  if (isReversed) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState<SortType>(SortType.DEFAULT);\n  const [isReversed, setIsReversed] = useState(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, sortField, isReversed);\n\n  const handleReverseClick = () => {\n    setIsReversed(!isReversed);\n  };\n\n  const handleResetClick = () => {\n    setSortField(SortType.DEFAULT);\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => setSortField(SortType.Alphabetically)}\n          className={cn(\"button\", \"is-info\", {\n            \"is-light\": sortField !== SortType.Alphabetically,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          onClick={() => setSortField(SortType.ByLength)}\n          type=\"button\"\n          className={cn(\"button\", \"is-info\", {\n            \"is-light\": sortField !== SortType.ByLength,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverseClick}\n          className={cn(\"button\", \"is-warning\", { \"is-light\": !isReversed })}\n        >\n          Reverse\n        </button>\n\n        {(sortField !== \"\" || isReversed) && (\n          <button\n            type=\"button\"\n            onClick={handleResetClick}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map((good) => (\n          <li key={good} data-cy=\"Good\">\n            {good}\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}